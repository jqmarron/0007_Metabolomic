---
title: "Metabolomics and BW trajectories"
subtitle: "BW trajectories (Include outliers :`r params$outliers`) (Impute missing:`r params$impute`)"
author: Jorge Martinez-Romero
format: html
editor: visual
execute:
  echo: false
params:
 outliers: true ## Presence of outliers 
 notch: false  ## Notches in boxplot 
 harmonize: false
 impute: false
editor_options: 
  chunk_output_type: console
  warning: false
toc: true   
self-contained: true
---

```{r}
#| echo: false
#| warning: false
#| include: false

pacman::p_load(readxl, gtsummary, janitor, hablar, tictoc, fs, kableExtra, DT)
pacman::p_load(tidyverse,reshape2,rstatix,ggpubr,LaplacesDemon,glmm,jtools)
#loadfonts(device = "win")extrafont,

```

# Statistical analysis

## Goal

Detecting eventual association between BW trajectories, lifespan and metabolites of interest across age-ranges/time-points.

#### Groups:

-   HET3

    -   Females

    -   Males

-   B6

    -   Females

    -   Males

#### Variables to analyze:

BW, metabolites.

## Workflow

### Read in data

BW data

```{r}
#| echo: false
#| warning: false
#| include: false
BW <- read_csv("BW_2022-12-12.csv", 
        col_types = cols(idno = col_character(), 
        date = col_date(format = "%m/%d/%Y"), 
        tod = col_date(format = "%m/%d/%Y"), 
        sex = col_factor(levels = c("F", 
            "M")), strain = col_factor(levels = c("B6", 
            "HET3")))) %>% mutate(age_wk=round(age_wk,digits = 1))
glimpse(BW)

```

ID Metabolome

```{r}
#| echo: false
#| warning: false
#| include: false
ID_Aon <- read_excel("ID_metabolome_Miguel.xlsx") %>% mutate(ID_MB=id)

View(ID_metabolome_Miguel)
glimpse(ID_Aon)
```


```{r}
ID_conversion <- read_excel("Metabo_ID_SLAM_conversion.xlsx")
glimpse(ID_conversion)
```


```{r}
SV <- read_csv("survival_detailed_2022-12-14.csv",
col_types = cols(tod = col_date(format = "%m/%d/%Y"),
sex = col_factor(levels = c("F",
"M")), strain = col_factor(levels = c("HET3",
"B6")), dob = col_date(format = "%m/%d/%Y"),
idno = col_character(), cage = col_character(),
dead_censor_nat = col_factor(levels = c("0",
"1"))))
glimpse(SV)

```




Clean covariates of interest

### Covariates

Filter TRF out: 


```{r}
ID_conversion_SL<-ID_conversion %>% 
  filter(GROUP_NAME=="SLAM") %>% mutate(idno=ID_SLAM)

```

Check records with more than one BW, same day, same animal ID

```{r}
Duplicated<-BW %>% 
  group_by(idno,age_wk) %>% 
  filter(n()>1)

```

Remove duplicated
```{r}
BW_no_dupes<-BW %>% 
  group_by(idno,age_wk) %>% 
  filter(!n()>1) %>% as.data.frame()

```


### Join data tables
```{r}
A<-BW %>% left_join(ID_conversion_SL, by = ("idno"),multiple = "all") %>% 
  filter(!is.na(ID_MB))
B<-A[which(A$ID_MB %in% ID_Aon$ID_MB),] 
B<-B %>% select(-strain.y) %>% rename(strain="strain.x")
rm(A)
```


```{r}
C<-B %>% left_join(SV %>% select(idno, dob,cage,dead_censor_nat,sex,strain,cohort),
                   by=c("idno"))


```


```{r}
C<-C %>% rename(strain="strain.y")
C<-C %>% mutate(sextrainx = paste0(sex.x,strain.x,sep="")) %>% 
                              mutate(sextrainx = as.factor(sextrainx))
C<-C %>% mutate(sextrainy = paste0(sex.y,strain,sep="")) %>% 
                              mutate(sextrainy = as.factor(sextrainy))

```




### Variable densities

```{r}
#| echo: false
#| warning: false

p<-ggplot(C, aes(x = bw)) +
  geom_density() +
  theme(panel.background = element_rect(fill = "wheat"))+
  facet_wrap(~sextrainy, ncol=2, scales = "free")
print(p)
```



------------------------------------------------------------------------


### Transform variables and remove outliers

<!-- Transform percentages to logit -->

<!-- ```{r} -->
<!-- #| echo: false -->
<!-- #| warning: false -->
<!-- # p <- invlogit(x) -->
<!-- # x <- logit(p) -->
<!-- to_logit<-function(df,pctes){ -->
<!-- aaa<-as.data.frame(sapply(df[pctes] , function(x) replace(x, x == 0, 0.0001))) -->
<!-- aaa<-as.data.frame(sapply(aaa , function(x) ifelse(is.na(x),NA,logit(x/100)))) -->
<!-- return(aaa)} -->
<!-- ``` -->

Transform variables to log

```{r}
#| echo: false
#| warning: false
to_log<-function(df,rest){
bbb<-as.data.frame(sapply(df[rest] , function(x) replace(x, x == 0, 0.0001)))  
bbb<-as.data.frame(sapply(bbb , function(x) ifelse(is.na(x),NA,log(x))))
return(bbb)
}
```

Apply log

```{r}
#| echo: false
#| warning: false
log_bw<-to_log(C,"bw")
D<-cbind(C,log_bw)
colnames(D)[length(colnames(D))]<-c("log_bw")


```


### Drop NAs 
```{r}
E<-D %>% filter(!is.na(bw))

```


### Remove outliers

Detect outliers (1.5 x IQR) function

```{r Remove outliers,echo=FALSE }
library(ggplot2)
library(data.table)

#generate some data
dat <- data.table(E)
# ggplot defines an outlier by default as something that's > 1.5*IQR from the borders of the box.

#function that takes in vector of data and a coefficient,
#returns boolean vector if a certain point is an outlier or not
check_outlier <- function(v, coef=1.5){
  quantiles <- quantile(v,probs=c(0.25,0.75))
  IQR <- quantiles[2]-quantiles[1]
  res <- v < (quantiles[1]-coef*IQR)|v > (quantiles[2]+coef*IQR)
  return(res)
}

#apply this to our data
dat[,outlier:= check_outlier (log_bw),by = sextrainy]
dat[,label:=ifelse(outlier,"out","")]
G<-dat %>% filter(label!="out")

#plot
p1<-ggplot(dat,aes(x=sextrainy,y=log_bw))+geom_boxplot()+geom_text(aes(label=label),hjust=-0.3)
print(p1)
```


```{r Remove outliers,echo=FALSE }
p2<-ggplot(G,aes(x=sextrainy,y=log_bw))+geom_boxplot()+geom_text(aes(label=label),hjust=-0.3)
print(p2)

```


```{r}
p<-ggplot(G, aes(x = bw)) +
  geom_density() +
  theme(panel.background = element_rect(fill = "wheat"))+
  facet_wrap(~sextrainy, ncol=2, scales = "free")
print(p)
```





Build Wrapper Remove to store removed

```{r}
remove_outliers<-function(df,Features){ 
  df<-df %>% dplyr::select(Features)
  nam<-colnames(df)
  df_NO <- as.data.frame(lapply(df , function(x) outliers(x)))
  df_Out <- lapply(df_NO , function(x) which(is.na((x))))
  names(df_Out)<-nam
  names(df_NO)<-nam
  return(list(df_NO,df_Out))
}
```

Apply transformation functions and remove outliers


```{r}
#| echo: false
#| warning: false

outlier_list_slam<-outliers(BW_no_dupes$log_bw) 


data_Out_sl<-outlier_list_slam[[2]]


#Insert NAs in SLAM dataset
SL<-data_slm[,Features]
i<-1
for(x in data_Out_sl){
  vble<-names(data_Out_sl)[i] 
  SL[x,vble]<-NA
  i<-1+i
}
data_slm_no<-cbind(data_slm[,1:8],SL)
data_slm_no<-data_slm_no %>%mutate(wave=1) %>% relocate(wave,.after=cohort)

```

Impute mean value by variable, treatment and timepoint

```{r}
library(reshape2)

data<-data_hpx_no

imputes<-function (data,vbles){
  for (i in 1:length(vbles)){
    name<-Features[i]
    variable<-data[,name]
    meanes<-with(data,tapply(variable,list(Treatment,wave),mean,na.rm = TRUE))
    meanes<-reshape2::melt(meanes)
    colnames(meanes)[1:2]<-c("Treatment","wave")
    aa<-c("Treatment","wave",name)
    if (all(!is.na(data[aa]))) {
    next
    }else{
    cc<-data[,aa] %>% left_join(meanes,by=c("Treatment","wave")) 
    ff<-with(data,ifelse(is.na(cc[,3]),cc[,4],cc[,3]))
    data[,name]<-round(ff,digit=2)
    }

}
return(data)
}


    

```

```{r}
data_hpx_no_mi<-imputes(data_hpx_no,Features)
data_slm_no_mi<-imputes(data_slm_no,Features)
```

Select option to continue (impute missing or not)

Select option to continue (with or without outliers)

```{r}
#| echo: false
#| warning: false

if(params$outliers){
  all<-rbind(data_hpx,data_slm)
}else{
  if(params$impute){
    all<-rbind(data_hpx_no_mi,data_slm_no_mi)
  }else{
  all<-rbind(data_hpx_no,data_slm_no)}
}
```

Select option to continue (with or without extra category)

```{r}
if(params$filter_extra){
  all<-all %>% filter(Treatment!="Extra")
}
```

Select option to continue (with or without SLAM comparison)

```{r}
if(params$filter_slam){
  all<-all %>% filter(Treatment!="Slam")
    all$Treatment<-as.factor(all$Treatment)
    levels(all$Treatment)[3]<-"Control"
    all$Treatment<-factor(all$Treatment,levels=c("Control","Ctrl + IH","IH + Recovery"))
}else{
   all$Treatment<-as.factor(all$Treatment)
    levels(all$Treatment)[4]<-"Control"
    all$Treatment<-factor(all$Treatment,levels=c("Control","Slam","Ctrl + IH","IH + Recovery"))
}
```

### Plotting

#### Quantiles all datapoints

```{r}
plotA<-function(x){All_vb<-c(Features[a],"Treatment")
data<-all %>% dplyr::select(All_vb)
df<-reshape2::melt(data, key = "variable", value = "value")

if(params$notch){
  ggplot(df, aes(x=Treatment, y=value)) +
  geom_boxplot(notch=T)+#outlier.shape = NA,show.legend = FALSE) + 
  theme(panel.background = element_rect(fill = "wheat"))+
  facet_wrap(~variable, ncol=2, scales = "free")
  
}else{
  ggplot(df, aes(x=Treatment, y=value)) +
  geom_boxplot()+#outlier.shape = NA,show.legend = FALSE) + 
  theme(panel.background = element_rect(fill = "wheat"))+
  facet_wrap(~variable, ncol=2, scales = "free")
  }
}
```

```{r}
#| echo: false
#| warning: false
#| fig-height: 10
#| fig-width: 7
a<-c(1:8)
plotA(a)
```

------------------------------------------------------------------------

```{r}
#| echo: false
#| warning: false
#| fig-height: 10
#| fig-width: 7
a<-c(9:16)
plotA(a)
```

------------------------------------------------------------------------

```{r}
#| echo: false
#| warning: false
#| fig-height: 10
#| fig-width: 7
a<-c(17:24)
plotA(a)
```

------------------------------------------------------------------------

```{r}
#| echo: false
#| warning: false
#| fig-height: 10
#| fig-width: 7
a<-c(25:31)
plotA(a)
```

#### Cross setional by timepoint

Determine variables of interest

```{r}
#variable names
Var<-c(
"#Retic(x10E09 cells/L)",                       
"%EOS(%)",                     "%LUC(%)",                     "%LYM(%)", 
"%MONO(%)",                    "%NEUT(%)",                    "%Retic(%)",
"abs_eos(x10E03 cells/µL)", 
"abs_lucs(x10E03 cells/µL)",   "abs_lymphs(x10E03 cells/µL)", 
"abs_monos(x10E03 cells/µL)",  "abs_neuts(x10E03 cells/µL)", 
"CHCM(g/dL)",                  "HCT(%)",                      "HDW(g/dL)",                "MCH(pg)",          "MCHC(g/dL)",                  "MCV(fL)",                  "measHGB(g/dL)",               "MPV(fL)",           "PLT(x10E03 cells/µL)",        "RBC(x10E06 cells/µL)",        "RDW(%)",                
"WBC(x10E03 cells/µL)"  
)

#Change column names to be handled by the models
# 
# Short<-c("Reti_n", "Eos_p","Luc_p","Lym_p",
#          "Mono_p", "Neu_p", "Reti_p", "Eos_n",
#          "Luc_n","Lym_n", "Mon_n", "Neu_n",
#          "CHCM","HTC", 
#          "HCDW","MCH",
#          "MCHC",
#          "MCV","HGB","MPV",
#          "Plt","RBC","RDW", "WBC")
# 
# 
# #Labels (one per variable)
# nam <- c("Reticulocyte", "Eosinophil","Large Unstained Cell","Lymphocyte",
#          "Monocyte", "Neutrophil", "Reticulocite", "Eosinophil",
#          "Large Unstained Cell","Lymphocyte", "Monocyte", "Neutrophil",
#          "Corpuscular Hgb Conc. Mean","Hematocrit", 
#          "Hgb Conc. Distribution Width","Mean Corpuscular Hemoglobin",
#          "Mean Corpuscular Hgb Concentration",
#          "Mean Corpuscular Volume","Hemoglobin","Mean Platelet Volume",
#          "Platelet","Red Blood Cell","RBC Distribution Width", "White Blood Cell")
# 
# #Units of thos variables
# units<-c("count x10E09 cells/L","%","%","%","%","%","%","%",
#          "count x10E03 cells/µL","count x10E03 cells/µL","count x10E03 cells/µL",
#          "count x10E03 cells/µL","count x10E03 cells/µL","count x10E03 cells/µL",
#          "g/dL","%","g/dL","pg","g/dL","fL","g/dL","fL",
#          "count x10E03 cells/µL","count x10E06 cells/µL","%",
#          "count x10E03 cells/µL")
```

```{r}
#variable names
Var<-c("CHCM(g/dL)","HCT(%)", "measHGB(g/dL)", "PLT(x10E03 cells/µL)","RBC(x10E06 cells/µL)","RDW(%)",                
"WBC(x10E03 cells/µL)")

#Change column names to be handled by the models

Short<-c("CHCM","HTC","HGB","Plt","RBC","RDW", "WBC")


#Labels (one per variable)
nam <- c("Corpuscular Hgb Conc. Mean","Hematocrit", 
         "Hemoglobin","Platelet","Red Blood Cell","RBC Distrib. Width", "White Blood Cell")

#Units of thos variables
units<-c("g/dL","%","g/dL","count x10E03 cells/µL","count x10E06 cells/µL","%",
         "count x10E03 cells/µL")
```

Select dataset. Include 4 timepoints (repeated 9 months old in slam).

```{r}
#| echo: false
#| warning: false
#Buil 4 timepoints with same values in slam to appear in all time points comparison
xx<-1
if(!params$filter_slam){
    all2<-all %>% filter(Treatment=="Slam") %>% mutate(wave=2)
    all3<-all %>% filter(Treatment=="Slam") %>% mutate(wave=3)
    all4<-all %>% filter(Treatment=="Slam") %>% mutate(wave=4)
    dfff<-as_tibble(rbind(all,all2,all3,all4))
    rm(all2,all3,all4)
    dfff<-dfff %>% rename_with(~ Short, all_of(Var))
  }else{
    dfff<-all  
    dfff<-dfff %>% rename_with(~ Short, all_of(Var))

}

#make a list
df_by_var <- rep(c("dfff"),
               times=c(length(Short)))

```

```{r}
#| echo: false
#| warning: false

mytheme <- theme(panel.background = element_rect(fill = "white"),
                 panel.grid = element_line(color = "light gray", size = 0.1, linetype = "dotted"),
                 plot.title = element_text(face = "bold", hjust = 0.5),
                 plot.subtitle = element_text(face = "bold", hjust = 0.5),
                 text = element_text(family="Century Schoolbook"))
```

Plot function using Wilcox_test

```{r}
plot_slam2 <- function(df_nam, var_nam, label, unit) {
    df_list <- eval(rlang::sym(df_nam))
    var <- rlang::sym(var_nam)

    y_lim_top <- df_list[[var_nam]] %>% max(na.rm = TRUE)
    y_lim_bottom <- df_list[[var_nam]] %>% min(na.rm = TRUE)
    df_y <- df_list %>%
        group_by(wave) %>%
        summarise(ymax = max(eval(var), na.rm = TRUE))
    scale <- df_list %>%
        summarise(scale = (max(eval(var), na.rm = TRUE) - min(eval(var), na.rm = TRUE)) / 15) %>%
        .[[1]]
    if(!params$filter_slam){
          df_p <- df_list %>%
              group_by(wave) %>%
              wilcox_test(as.formula(paste(var_nam, "Treatment", sep="~"))) %>%
              adjust_pvalue(method = "BH") %>%
              add_significance("p.adj") %>% 
              filter(group1 == "Control" | group2 == "IH + Recovery") %>% 
              add_xy_position(x="Treatment", dodge=0.8) %>%
              mutate(xmin = case_when(group1=="Control" & wave==1 ~ 0.65,
                                      group1=="Control" & wave==2 ~ 1.65,
                                      group1=="Control" & wave==3 ~ 2.65,
                                      group1=="Control" & wave==4 ~ 3.65,
                                      
                                      group1=="Slam" & wave==1 ~ 0.87,
                                      group1=="Slam" & wave==2 ~ 1.87,
                                      group1=="Slam" & wave==3 ~ 2.87,
                                      group1=="Slam" & wave==4 ~ 3.87,
                                      
                                      group1=="Ctrl + IH" & wave==1 ~ 1.09,
                                      group1=="Ctrl + IH" & wave==2 ~ 2.09,
                                      group1=="Ctrl + IH" & wave==3 ~ 3.09,
                                      group1=="Ctrl + IH" & wave==4 ~ 4.09),
                     
                     xmax = case_when(group1=="Control" & group2=="Slam" ~ (xmin+0.22),
                                      group1=="Control" & group2=="Ctrl + IH" ~ (xmin+0.44),
                                      group1=="Control" & group2=="IH + Recovery" ~ (xmin+0.66),
                                      
                                      group1=="Slam" & group2=="IH + Recovery" ~ (xmin+0.44),
                                      group1=="Ctrl + IH" & group2=="IH + Recovery" ~ (xmin+0.22))) %>%
              
              left_join(., df_y, by = "wave") %>%
              mutate(y.position = case_when(group1=="Control" & group2=="Slam" ~ (ymax+scale),
                                            group1=="Control" & group2=="Ctrl + IH" ~ (ymax+scale*2),
                                            group1=="Control" & group2=="IH + Recovery" ~ (ymax+scale*3),
                                            group1=="Slam" & group2=="IH + Recovery" ~ (ymax+scale*4),
                                            group1=="Ctrl + IH" & group2=="IH + Recovery" ~ (ymax+scale*5)))
    }else{df_p <- df_list %>%
              group_by(wave) %>%
              wilcox_test(as.formula(paste(var_nam, "Treatment", sep="~"))) %>%
              adjust_pvalue(method = "BH") %>%
              add_significance("p.adj") %>% 
              filter(group1 == "Control" | group2 == "IH + Recovery") %>% 
              add_xy_position(x="Treatment", dodge=0.6) %>%
              mutate(xmin = case_when(group1=="Control" & wave==1 ~ 0.65,
                                      group1=="Control" & wave==2 ~ 1.65,
                                      group1=="Control" & wave==3 ~ 2.65,
                                      group1=="Control" & wave==4 ~ 3.65,
                                      
                                      group1=="Ctrl + IH" & wave==1 ~ 0.90,
                                      group1=="Ctrl + IH" & wave==2 ~ 1.90,
                                      group1=="Ctrl + IH" & wave==3 ~ 2.90,
                                      group1=="Ctrl + IH" & wave==4 ~ 3.90),
                                      
                               
                     xmax = case_when(group1=="Control" & group2=="Ctrl + IH" ~ (xmin+0.22+0.20),
                                      group1=="Control" & group2=="IH + Recovery" ~ (xmin+0.44+0.25),
                                      group1=="Ctrl + IH" & group2=="IH + Recovery" ~ (xmin+0.45))) %>%
              
              left_join(., df_y, by = "wave") %>%
              mutate(y.position = case_when(group1=="Control" & group2=="Ctrl + IH" ~ (ymax+scale),
                                            group1=="Control" & group2=="IH + Recovery" ~ (ymax+scale*2),
                                            group1=="Ctrl + IH" & group2=="IH + Recovery" ~ (ymax+scale*3)))
    }
    df <- df_list
    n1 <- count(df)[[1]]
    df_p2<-df_p %>% mutate(p.adj.signif = str_replace(p.adj.signif, "ns", " "))
      p_val<-paste0(label,"_pval",sep="")
      assign(p_val,df_p2,envir = .GlobalEnv)
    
      plot_B6F <- ggboxplot(data = df, x="wave", y=var_nam, fill="Treatment",
                          notch = FALSE, add = "jitter", add.params = list(color = "Treatment", alpha = 0.3,
                                                                          show.legend = FALSE),
                          ggtheme = mytheme) +
        labs(y=paste(label, " (", unit, ")\n \n", sep=""), x="\n Time Point (2-week interval)", fill="Treatment") +
        stat_pvalue_manual(
            df_p2,  label = "p.adj.signif", tip.length = 0.01) +
        scale_color_manual(name = "", values = c("Control" = "pink3", "IH + Recovery" = "wheat3", "Slam" = "pink", "Ctrl + IH" = "red3")) +
        scale_fill_manual(name = "", values = c("Control" = "pink3", "IH + Recovery" = "wheat3", "Slam" = "pink", "Ctrl + IH" = "red3"))
    plot_B6F <- ggpar(plot_B6F,
                      ylim = c(y_lim_bottom, (y_lim_top+(scale*5))))
    
    
      plot_B6F<- annotate_figure(plot_B6F,
                    top = text_grob(paste(label, " Comparisons by Treatment and Timepoint", sep=""),
                                          color = "black", face = "bold", size=14,
                                    family = "Century Schoolbook"),
                    bottom = text_grob("Wilcox Test Adjusted p-values (Bonferroni)  \n *: p < 0.05,   **: p < 0.01,   ***: p < 0.001,   ****: p < 0.0001 \n",
                                      color = "black", face = "italic", size=10,
       
                                                                     family = "Century Schoolbook"),)

    
}
```

```{r}
#| echo: false
#| warning: false
#i<-2

#p<-plot_slam2(df_by_var[[i]], Short[i], nam[i], units[i])
 # p<-plot_slam2("df", "HCT.Harmonize", nam[1], units[1])
  #print(p)
```

Create lists of plots

```{r}
#| echo: false
#| warning: false
plot_list1 <- list()
plot_list2 <- list()


a<-round(length(Short)/2,digits = 0)
b<-length(Short)


for (i in seq_along(Short)[1:a]){
    plot_nam <- paste("SLAM2_plot", i, sep="_")
    output <- plot_slam2(df_by_var[[i]], Short[i], nam[i], units[i])
    assign(plot_nam, output)
}

for (i in seq_along(Short)[(a+1):b]){
    plot_nam <- paste("SLAM2_plot", i, sep="_")
    output <- plot_slam2(df_by_var[[i]], Short[i], nam[i], units[i])
    assign(plot_nam, output)
}


plot_list1 <- lapply(1:a, function(x) eval(parse(text=paste0("SLAM2_plot_", x))))
plot_list2 <- lapply((a+1):b, function(x) eval(parse(text=paste0("SLAM2_plot_", x))))

plot_list <- c(plot_list1, plot_list2)
names(plot_list) <- Short[1:b]


rm(list=ls(pattern="^SLAM2_plot"))
rm(list=ls(pattern="list1$"))
rm(list=ls(pattern="list2$"))

```

Plot

```{r}
#| echo: false
#| warning: false
for (i in 1:length(Short)) {
    print(plot_list[[i]])
}

```

### Summary

```{r}
#| echo: false
#| warning: false
dfff$cage<-as.factor(dfff$cage)
dfff$idno<-as.factor(dfff$idno)
dfff$wave<-as.factor(dfff$wave)


summary(dfff[,union("Treatment",union("wave",Short))])
```

### Harmonization.

#### Inter animal variation

To analyse result of treatments filtering the variability of the animals we identify that variability fitting a mixed effect model on 4 time-points. We determine the intercept differences for each animal and remove them from the data set. We include cage and age correction.

```{r}
#intercept slope and cage
# library(lme4)
# 
# Harmonize<-function (dataframe,Variables){
#       i<-1; 
#       df<-as.data.frame(get(dataframe))
#       Harmo_list<-list()
#       i<-1
#       for (i in 1:length(Variables)) {
#         
#           name_pre<-Variables[i]#name of predictor e.g. rbc
#           predictor<-with(df,get(name_pre))# extract the values of that column e.g., rbc
#           mod<-lmer(predictor ~ Treatment + (1|cage)+(age_wk|idno) ,df)#model
#           intercept<-ranef(mod)#extract All random intercept differences.
#           intercept_id<-intercept$idno #filter cohort only 
#           intercept_cage<-intercept$cage #filter cohort only 
#           intercept_id<-rownames_to_column(intercept_id, "idno") %>% 
#             rename(slop_id=age_wk)%>% rename(int_id=`(Intercept)`)
#           intercept_cage<-rownames_to_column(intercept_cage, "cage") %>% rename(int_cage=`(Intercept)`)
#           
#           #Subtract that coefficient per cohort and variable from original values.
#           df<-df %>% left_join(., intercept_cage, by = "cage") %>% 
#                          left_join(., intercept_id, by = c("idno")) %>% 
#                                mutate(redu_slop=(age_wk-40)*slop_id) %>% 
#                                   mutate(xx=round((predictor-redu_slop-int_cage-int_id),digit=2)) %>% 
#                                                  rename(!!paste(name_pre, "Harmonized", sep = ".") := xx)
#           
#           df<-df %>% select(!(int_cage:redu_slop))
#           Harmo_list[[i]]<-mod
#           i<-1+i
#       }
#   names(Harmo_list)<-Variables
#   data_hr<-paste0(dataframe,"_harmonized",sep="")
#   list_hr<-paste0("list_models_",dataframe,"_harmonized",sep="")
#   assign(data_hr,df, envir=globalenv())
#   assign(list_hr,Harmo_list, envir=globalenv())
#   return(df)
# }
```

Only intercept correction

```{r}
#| echo: false
#| warning: false
library(lme4)

Harmonize<-function (dataframe,Variables){
      i<-1; 
      df<-as.data.frame(get(dataframe))
      Harmo_list<-list()
      i<-1
      for (i in 1:length(Variables)) {
          name_pre<-Variables[i]#name of predictor e.g. rbc
          predictor<-with(df,get(name_pre))# extract the values of that column e.g., rbc
          mod<-lmer(predictor ~ Treatment + age_wk + (1|cage)+(1|idno) ,df)#model
          intercept<-ranef(mod)#extract All random intercept differences.
          intercept_id<-intercept$idno 
          intercept_id<-rownames_to_column(intercept_id, "idno") %>% rename(int_id=`(Intercept)`) 
             df<-df %>%left_join(., intercept_id, by = c("idno")) %>% 
                               mutate(xx=round((predictor-int_id),digit=2)) %>% 
                                                 rename(!!paste(name_pre, "Harmonized", sep = ".") := xx)
         # 
          df<-df %>% select(!(int_id))
          Harmo_list[[i]]<-mod
          i<-1+i
      }
  names(Harmo_list)<-Variables
  data_hr<-paste0(dataframe,"_harmonized",sep="")
  list_hr<-paste0("list_models_",dataframe,"_harmonized",sep="")
  assign(data_hr,df, envir=globalenv())
  assign(list_hr,Harmo_list, envir=globalenv())
  return(df)
}
```

```{r}
#| echo: false
#| warning: false
#| include: false
Harmonize("dfff",Short)
cat("BB")
```

#### Check ICC before/after harmonization

Before

```{r}
#| echo: false
#| warning: false
#| include: false
BB<-lapply(list_models_dfff_harmonized,summary)
CC<-lapply(BB,function(x) as.data.frame(x$varcor)[,c(1,4)])
Pct_variance_cohort<-t(as.data.frame(lapply(CC,function(x) 100*(x[1,2]/sum(x[,2])))))
colnames(Pct_variance_cohort)<-"Variance_inter_animal(%)"
rm(BB,CC)

as.data.frame(Pct_variance_cohort) %>% arrange(desc(`Variance_inter_animal(%)`))%>% round(digit=4)

ICCTrain<-as.data.frame(Pct_variance_cohort) %>% arrange(desc(`Variance_inter_animal(%)`))%>% round(digit=1)
```

```{r}
kable(ICCTrain)
#write.csv(ICCTrain,"ICCTrain.csv")
```

After

```{r}
#| echo: false
#| warning: false
#| include: false
Featur_ht<-paste0(c(Short),".Harmonized",sep="")
Harmonize(dataframe="dfff_harmonized",Variables = Featur_ht)
cat("AA")
```

```{r}
#| echo: false
#| warning: false
#| include: false
BB<-lapply(list_models_dfff_harmonized_harmonized,summary)
CC<-lapply(BB,function(x) as.data.frame(x$varcor)[,c(1,4)])
Pct_variance_cohort_harmonized<-t(as.data.frame(lapply(CC,function(x) 100*(x[1,2]/sum(x[,2])))))
colnames(Pct_variance_cohort_harmonized)<-"Variance_inter_animal(%)"
rm(BB,CC,AA)

as.data.frame(Pct_variance_cohort_harmonized) %>% arrange(desc(`Variance_inter_animal(%)`)) %>% round(digit=4)

ICCTrain_hz<-as.data.frame(Pct_variance_cohort_harmonized) %>% arrange(desc(`Variance_inter_animal(%)`)) %>% round(digit=4)
```

```{r}
kable(ICCTrain_hz)
```

```{r}
#| echo: false
#| warning: false
#make a list
df_by_var <- rep(c("dfff_harmonized"),
               times=c(length(Short)))


# i<-2
# 
# p<-plot_slam2_h(df_by_var[[i]], Short[i], nam[i], units[i])
# #p<-plot_slam2("df", "HCT.Harmonize", nam[1], units[1])
# print(p)
```

### Plotting Harmonized

Load Function

```{r}
plot_slam2_h <- function(df_nam, var_nam, label, unit) {
    df_list <- eval(rlang::sym(df_nam))
    var_nam<-paste0(var_nam,".Harmonized")
    var <- rlang::sym(var_nam)
    y_lim_top <- df_list[[var_nam]] %>% max(na.rm = TRUE)
    y_lim_bottom <- df_list[[var_nam]] %>% min(na.rm = TRUE)
    df_y <- df_list %>%
        group_by(wave) %>%
        summarise(ymax = max(eval(var), na.rm = TRUE))
    scale <- df_list %>%
        summarise(scale = (max(eval(var), na.rm = TRUE) - min(eval(var), na.rm = TRUE)) / 15) %>%
        .[[1]]
    if(!params$filter_slam){
          df_p <- df_list %>%
              group_by(wave) %>%
              wilcox_test(as.formula(paste(var_nam, "Treatment", sep="~"))) %>%
              adjust_pvalue(method = "BH") %>%
              add_significance("p.adj") %>% 
              filter(group1 == "Control" | group2 == "IH + Recovery") %>% 
              add_xy_position(x="Treatment", dodge=0.8) %>%
              mutate(xmin = case_when(group1=="Control" & wave==1 ~ 0.65,
                                      group1=="Control" & wave==2 ~ 1.65,
                                      group1=="Control" & wave==3 ~ 2.65,
                                      group1=="Control" & wave==4 ~ 3.65,
                                      
                                      group1=="Slam" & wave==1 ~ 0.87,
                                      group1=="Slam" & wave==2 ~ 1.87,
                                      group1=="Slam" & wave==3 ~ 2.87,
                                      group1=="Slam" & wave==4 ~ 3.87,
                                      
                                      group1=="Ctrl + IH" & wave==1 ~ 1.09,
                                      group1=="Ctrl + IH" & wave==2 ~ 2.09,
                                      group1=="Ctrl + IH" & wave==3 ~ 3.09,
                                      group1=="Ctrl + IH" & wave==4 ~ 4.09),
                     
                     xmax = case_when(group1=="Control" & group2=="Slam" ~ (xmin+0.22),
                                      group1=="Control" & group2=="Ctrl + IH" ~ (xmin+0.44),
                                      group1=="Control" & group2=="IH + Recovery" ~ (xmin+0.66),
                                      
                                      group1=="Slam" & group2=="IH + Recovery" ~ (xmin+0.44),
                                      group1=="Ctrl + IH" & group2=="IH + Recovery" ~ (xmin+0.22))) %>%
              
              left_join(., df_y, by = "wave") %>%
              mutate(y.position = case_when(group1=="Control" & group2=="Slam" ~ (ymax+scale),
                                            group1=="Control" & group2=="Ctrl + IH" ~ (ymax+scale*2),
                                            group1=="Control" & group2=="IH + Recovery" ~ (ymax+scale*3),
                                            group1=="Slam" & group2=="IH + Recovery" ~ (ymax+scale*4),
                                            group1=="Ctrl + IH" & group2=="IH + Recovery" ~ (ymax+scale*5)))
    }else{df_p <- df_list %>%
              group_by(wave) %>%
              wilcox_test(as.formula(paste(var_nam, "Treatment", sep="~"))) %>%
              adjust_pvalue(method = "BH") %>%
              add_significance("p.adj") %>% 
              filter(group1 == "Control" | group2 == "IH + Recovery") %>% 
              add_xy_position(x="Treatment", dodge=0.6) %>%
              mutate(xmin = case_when(group1=="Control" & wave==1 ~ 0.65,
                                      group1=="Control" & wave==2 ~ 1.65,
                                      group1=="Control" & wave==3 ~ 2.65,
                                      group1=="Control" & wave==4 ~ 3.65,
                                      
                                      group1=="Ctrl + IH" & wave==1 ~ 0.90,
                                      group1=="Ctrl + IH" & wave==2 ~ 1.90,
                                      group1=="Ctrl + IH" & wave==3 ~ 2.90,
                                      group1=="Ctrl + IH" & wave==4 ~ 3.90),
                                      
                               
                     xmax = case_when(group1=="Control" & group2=="Ctrl + IH" ~ (xmin+0.22+0.20),
                                      group1=="Control" & group2=="IH + Recovery" ~ (xmin+0.44+0.25),
                                      group1=="Ctrl + IH" & group2=="IH + Recovery" ~ (xmin+0.45))) %>%
              
              left_join(., df_y, by = "wave") %>%
              mutate(y.position = case_when(group1=="Control" & group2=="Ctrl + IH" ~ (ymax+scale),
                                            group1=="Control" & group2=="IH + Recovery" ~ (ymax+scale*2),
                                            group1=="Ctrl + IH" & group2=="IH + Recovery" ~ (ymax+scale*3)))
    }
    df <- df_list
    n1 <- count(df)[[1]]
    df_p2<-df_p %>% mutate(p.adj.signif = str_replace(p.adj.signif, "ns", " "))
      p_val<-paste0(label,"_pval_harm",sep="")
      assign(p_val,df_p2,envir = .GlobalEnv)
    
      plot_B6F <- ggboxplot(data = df, x="wave", y=var_nam, fill="Treatment",
                          notch = FALSE, add = "jitter", add.params = list(color = "Treatment", alpha = 0.3,
                                                                          show.legend = FALSE),
                          ggtheme = mytheme) +
        labs(y=paste(label, " (", unit, ")\n \n", sep=""), x="\n Time Point (2-week interval)", fill="Treatment") +
        stat_pvalue_manual(
            df_p2,  label = "p.adj.signif", tip.length = 0.01) +
        scale_color_manual(name = "", values = c("Control" = "pink3", "IH + Recovery" = "wheat3", "Slam" = "pink", "Ctrl + IH" = "red3")) +
        scale_fill_manual(name = "", values = c("Control" = "pink3", "IH + Recovery" = "wheat3", "Slam" = "pink", "Ctrl + IH" = "red3"))
    plot_B6F <- ggpar(plot_B6F,
                      ylim = c(y_lim_bottom, (y_lim_top+(scale*5))))
    
    
      plot_B6F<- annotate_figure(plot_B6F,
                    top = text_grob(paste(label, " Comparisons by Treatment and Timepoint \n Harmonized", sep=""),
                                          color = "black", face = "bold", size=14,
                                    family = "Century Schoolbook"),
                    bottom = text_grob("Wilcox Test Adjusted p-values (Bonferroni)  \n *: p < 0.05,   **: p < 0.01,   ***: p < 0.001,   ****: p < 0.0001 \n",
                                      color = "black", face = "italic", size=10,
       
                                                                     family = "Century Schoolbook"),)

    
}
```

```{r}
#| echo: false
#| warning: false
#i<-2

#p<-plot_slam2(df_by_var[[i]], Short[i], nam[i], units[i])
 # p<-plot_slam2("df", "HCT.Harmonize", nam[1], units[1])
  #print(p)
```

Create lists of plots

```{r}
#| echo: false
#| warning: false
plot_list1_h <- list()
plot_list2_h <- list()


a<-round(length(Short)/2,digits = 0)
b<-length(Short)


for (i in seq_along(Short)[1:a]){
    plot_nam <- paste("SLAM2_plot_h", i, sep="_")
    output <- plot_slam2_h(df_by_var[[i]], Short[i], nam[i], units[i])
    assign(plot_nam, output)
}

for (i in seq_along(Short)[(a+1):b]){
    plot_nam <- paste("SLAM2_plot_h", i, sep="_")
    output <- plot_slam2_h(df_by_var[[i]], Short[i], nam[i], units[i])
    assign(plot_nam, output)
}


plot_list1_h <- lapply(1:a, function(x) eval(parse(text=paste0("SLAM2_plot_h_", x))))
plot_list2_h <- lapply((a+1):b, function(x) eval(parse(text=paste0("SLAM2_plot_h_", x))))

plot_list <- c(plot_list1_h, plot_list2_h)
names(plot_list) <- Short[1:b]


rm(list=ls(pattern="^SLAM2_plot"))
rm(list=ls(pattern="list1$"))
rm(list=ls(pattern="list2$"))

```

Plot

```{r}
#| echo: false
#| warning: false
for (i in 1:length(Short)) {
    print(plot_list[[i]])
}

```

### Longitudinal modeling

#### Not harmonized data

```{r}
#| echo: false
#| warning: false
Short
pctes<-Short[c(2,6)]
rest<-c(setdiff(Short,pctes))
df<-dfff[,Short]# %>%select(Short)
ph<-dfff[,c(1:9)]
df<-cbind(df,ph)
aaa<-to_logit(df,pctes) 
aaa<-aaa%>% mutate_if(is.numeric, ~round(., 2))
bbb<-to_log(df,rest)
bbb<-bbb%>% mutate_if(is.numeric, ~round(., 2))
df<-cbind(ph,aaa,bbb)
df<-df %>% mutate(age2=age_wk*age_wk)

modela<-function (dataframe,Variables){
  LMM_list<-list()
            for (i in 1:length(Variables)) {
          name_pre<-Variables[i]#name of predictor e.g. rbc
          predictor<-with(df,get(name_pre))# extract the values of that column e.g., rbc
          mod<-lmer(scale(predictor) ~ Treatment + age_wk + (1|cage)+(1|idno) ,df)#model
          LMM_list[[i]]<-mod
          
      }
  names(LMM_list)<-Variables
  list_hr<-paste0("lmm",1,sep="")
  assign(list_hr,LMM_list, envir=globalenv())
}
modela(df,Short)
#format(Sys.time(), "%s")
```

```{r}
#| echo: false
#| warning: false
lapply(lmm1,summ)
```
